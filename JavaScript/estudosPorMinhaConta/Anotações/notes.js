//Etapa 1 - Objetos em JavaScript'


/*
-------------------------------------- Teoria r√°pida --------------------------------------
Em JavaScript, objetos s√£o estruturas que armazenam pares chave: valor.
*/

let pessoa = {
  nome: "Juninho",
  idade: 20,
  cidade: "Ja√∫"
};

//Voc√™ pode acessar os valores assim:

console.log(pessoa.nome);     // "Juninho"
console.log(pessoa["idade"]); // 20

//Pode alterar ou adicionar propriedades:

pessoa.idade = 21;
pessoa.profissao = "Estudante";

// Objetos dentro de arrays (muito comum!)

let alunos = [
  { nome: "Ana", nota: 8 },
  { nome: "Bruno", nota: 5 },
  { nome: "Carla", nota: 9 }
];

//Acessando:

console.log(alunos[1].nome); // Bruno


// -------------------------------------- Etapa 2 ‚Äì M√©todos de Arrays ---------------------------------------------

/*üìå 1. forEach()
Serve para executar uma fun√ß√£o para cada item do array, sem retornar nada.
*/

let nomes = ["Ana", "Bruno", "Carlos"];
nomes.forEach(nome => {
  console.log("Ol√°, " + nome);
});

/*
üìå 2. map()
Cria um novo array, com os valores transformados
*/

let numeros = [1, 2, 3];
let dobrados = numeros.map(num => num * 2); // [2, 4, 6]
console.log(dobrados);

/*
üìå 3. filter()
Cria um novo array s√≥ com os itens que passam em um teste (if).
*/

let idades = [12, 17, 20, 30];
let maiores = idades.filter(idade => idade >= 18); // [20, 30]
console.log(maiores);

/*
üìå 4. reduce()
Reduz o array a um √∫nico valor (ex: soma total).
*/

let numeros2 = [1, 2, 3, 4];
let soma = numeros.reduce((acumulador, atual) => acumulador + atual, 0); // 10
console.log(soma)

/*
üìå 5. find()
Retorna o primeiro item que passar em um teste (como um if).
*/

let produtos = [
  { nome: "Mouse", preco: 50 },
  { nome: "Teclado", preco: 100 }
];

let caro = produtos.find(p => p.preco > 60); // retorna o Teclado
console.log(caro)

// ------------------------------------- Etapa 3 ‚Äì Fun√ß√µes reutiliz√°veis -------------------------------------------


/*
 O que √© uma fun√ß√£o?
Uma fun√ß√£o √© um bloco de c√≥digo reutiliz√°vel que executa uma tarefa espec√≠fica.
Voc√™ pode chamar (ou invocar) ela quantas vezes quiser, com valores diferentes.
*/

//Estrutura b√°sica de uma fun√ß√£o:
function nomeDaFuncao(parametros) {
  // bloco de c√≥digo
  return resultado;
}

// Exemplo simples:
function somar(a, b) {
  return a + b;
}

let resultado = somar(3, 5);
console.log(resultado); // Vai imprimir: 8

/*
O que acontece aqui:
Criamos uma fun√ß√£o chamada somar

Ela recebe dois par√¢metros: a e b

Usa o return para devolver o resultado da soma

Depois chamamos a fun√ß√£o com os valores 3 e 5
*/

/*
Dicas importantes:
function √© a palavra-chave para declarar

Par√¢metros s√£o as "vari√°veis de entrada"

return envia um valor de volta pra quem chamou a fun√ß√£o

Sem return, a fun√ß√£o retorna undefined
*/

//Exemplo com string:

function boasVindas(nome) {
  return `Ol√°, ${nome}! Seja bem-vindo(a)!`;
}

console.log(boasVindas("Juninho"));
